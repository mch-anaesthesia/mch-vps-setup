{
	# Global options
	email {$CADDY_EMAIL}

	# Caddy’s own engine logs (errors, start/stop) → file + stderr
	log {
		output file /var/log/caddy/caddy.log
		output stderr
		level ERROR
	}
}

# ----------------------
# 1) Shared security snippet
# ----------------------
(security_common) {
	# Security headers
	header {
		Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
		X-Frame-Options "DENY"
		X-Content-Type-Options "nosniff"
		X-XSS-Protection "1; mode=block"
		Referrer-Policy "strict-origin-when-cross-origin"
		Permissions-Policy "geolocation=(), microphone=()"
	}

	# Cap request bodies
	request_body {
		max_size 10MB
	}
}

# ----------------------
# 2) Planka “app” snippet
# ----------------------
(planka_site) {
	import security_common

	# a) Access logs → stdout (for docker logs) + file
	log docker_stdout_log {
		output stdout
		format console
		level INFO
	}
	log file_log {
		output file /var/log/caddy/access.log
		format json
		level INFO
	}

	# b) Cover rewrite
	@cover {
		host planka.{$DOMAIN}
		path_regexp cover ^/assets/cover-[A-Za-z0-9-]+\.jpg$
	}
	handle @cover {
		root * /
		rewrite * /customisation/cover-mch.jpg
		file_server
	}

	# c) WebSocket / SSE proxy (no timeout)
	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}
	handle @ws {
		reverse_proxy planka:1337 {
			stream_timeout 0
			stream_close_delay 0
		}
	}

	# d) Fallback: all other traffic → backend
	handle {
		reverse_proxy planka:1337 {
			transport http {
				dial_timeout 3s
				response_header_timeout 15s
				read_timeout 15s
				write_timeout 15s
			}
		}
	}
}

# ----------------------
# 3) Bind to hostname
# ----------------------

# Temporarily redirect base domain
{$DOMAIN} {
	redir planka.{$DOMAIN} temporary
}

planka.{$DOMAIN} {
	import planka_site
}
